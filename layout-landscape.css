/* layout-landscape.css
   Landscape-only layout overrides (force full safe-area width)
   Load this AFTER your main CSS.
*/

@media (orientation: landscape), (min-aspect-ratio: 1/1) {

  /* 0) Safety: ensure the file is really loaded (temporary visual check)
     Uncomment for a quick test, then re-comment:
  body { outline: 3px solid lime !important; }
  */

  /* 1) Kill any width caps from portrait */
  :root {
    --card-max: 99999px; /* neutralize clamp upper bound */
  }

  /* 2) Ancestors must not clamp the width */
  html, body, #app {
    width: 100% !important;
    max-width: none !important;
    box-sizing: border-box;
  }

  /* Portrait had body as flex; that can center & shrink the child.
     Make the body a normal block container in landscape.
  */
  body {
    display: block !important;
    margin: 0;
    /* Respect all safe areas */
    padding:
      calc(env(safe-area-inset-top, 0px) + 10px)
      calc(env(safe-area-inset-right, 0px) + 10px)
      calc(env(safe-area-inset-bottom, 0px) + 10px)
      calc(env(safe-area-inset-left, 0px) + 10px);
    min-height: 100dvh;
    overflow: hidden;
  }

  /* 3) FORCE the card to fill the safe-area viewport width/height */
  .card,
  #card {
    /* Overwrite the portrait clamp */
    width: calc(100dvw - env(safe-area-inset-left, 0px) - env(safe-area-inset-right, 0px)) !important;
    height: calc(100dvh - env(safe-area-inset-top, 0px) - env(safe-area-inset-bottom, 0px)) !important;

    max-width: none !important;
    max-height: none !important;

    margin: 0 !important;             /* defeat margin:auto centering */
    padding: 0;                        /* grid gaps handle spacing */
    box-sizing: border-box;

    display: grid !important;
    grid-template-columns: 1fr 1fr;    /* left / right halves */
    grid-auto-rows: minmax(0, 1fr);
    grid-auto-flow: row;
    gap: var(--gap);
  }

  /* 4) Left column: Bezel stacked over Memory */
  .bezel {
    grid-column: 1;
    grid-row: 1;
    margin: 0 0 var(--gap) 0;
  }

  .memory {
    grid-column: 1;
    grid-row: 2;
    align-self: end;
    max-height: 40dvh;
    overflow: clip;
  }

  .results .pad { gap: 8px; }
  .history { max-height: 100%; overflow: auto; }

  /* 5) Right column: Keypad (console + fractions) occupies entire right half */
  .keypad {
    grid-column: 2 / 3;
    grid-row: 1 / -1;

    display: grid;
    grid-template-rows: auto 1fr;   /* console on top, fractions below */
    gap: var(--gap);

    /* Tile sizing from safe-area-visible height */
    --available-h: calc(100dvh - env(safe-area-inset-top, 0px) - env(safe-area-inset-bottom, 0px));
    --land-rows: 7;          /* 4 console + 3 fractions */
    --land-gap-count: 8;     /* 4 + 3 + 1 between grids */
    --tile-h: calc((var(--available-h) - var(--land-gap-count) * var(--gap)) / var(--land-rows));
  }

  /* Generous but safe tap targets */
  :root {
    --tile-min: 44px;
    --tile-max: 120px;
  }

  .console-grid,
  .fract-grid {
    width: 100%;
    --tile: clamp(var(--tile-min), var(--tile-h), var(--tile-max));
  }

  .console-grid { grid-template-rows: repeat(4, var(--tile)); }
  .fract-grid   { grid-template-rows: repeat(3, var(--tile)); }

  .keypad.pad { padding: var(--pad); }

  /* 6) Ensure panels donâ€™t inherit stray max-widths */
  .panel { max-width: none !important; }
}

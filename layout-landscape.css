/* layout-landscape.css
   Landscape-only layout for Inch Calc
   - Full device size on .card (100dvw/100dvh)
   - Safe-area padding applied to .card (not body)
   - Left column widened (55%) for Bezel + Memory
   - Wider space between columns (25px)
   - Unified 7×5 keypad grid on the right: evenly spaced rows that fill the column
   - No clipping: rows are minmax(44px, 1fr) to auto-fit
*/

@media (orientation: landscape), (min-aspect-ratio: 1/1) {


  :root {
    --card-max: 99999px;
    --left-col-fr: 0.55fr;
    --right-col-fr: 0.45fr;
    --tile-min: 44px;   /* comfy tap target */
    /* --gap comes from your base CSS (8px). */
  }

  html, body, #app {
    width: 100% !important;
    max-width: none !important;
    box-sizing: border-box;
  }

  /* Let .card own safe-area padding in landscape */
  body {
    display: block !important;
    margin: 0;
    padding: 0 !important;
    min-height: 100dvh;
    overflow: hidden;
    background: #1f4d4d;
  }

  /* .card fills device viewport and lays out two columns inside the safe area */
  .card,
  #card {
    position: relative;
    width: 100dvw !important;
    height: 100dvh !important;

    /* Safe-area padding here so content never sits under bars/notch */
    padding:
      calc(env(safe-area-inset-top, 0px) + 10px)
      calc(env(safe-area-inset-right, 0px) + 10px)
      calc(env(safe-area-inset-bottom, 0px) + 10px)
      calc(env(safe-area-inset-left, 0px) + 10px);

    max-width: none !important;
    max-height: none !important;
    margin: 0 !important;
    box-sizing: border-box;

    display: grid !important;
    grid-template-columns: var(--left-col-fr) var(--right-col-fr);
    grid-auto-rows: minmax(0, 1fr);
    grid-auto-flow: row;

    /* Wider gap between left/right columns; rows keep base gap (8px) */
    column-gap: 25px;
    row-gap: var(--gap);
  }
.bezel .tape .center-line {
  left: var(--center-line-left, 50%) !important; /* fallback keeps portrait value */
}
  /* ===== Left column: Bezel stacked over Memory ===== */
  .bezel,
  .memory,
  .panel {
    width: 100% !important;
    max-width: none !important;
    justify-self: stretch !important;
    align-self: stretch;
  }

  .bezel {
    grid-column: 1;
    grid-row: 1;
    margin: 0 0 var(--gap) 0;
  }

  .memory {
    grid-column: 1;
    grid-row: 2;
    align-self: end;
    max-height: none;
    overflow: clip;
  }

  .bezel__rim {
    width: 100%;
    box-sizing: border-box;
  }

  .results .pad { gap: 8px; }
  .history { max-height: 100%; overflow: auto; }

  .row.input { font-size: clamp(20px, 2.2vw, 30px); }
  .output    { font-size: clamp(20px, 1.9vw, 30px); }

  /* ===== Right column: unified 7×5 grid (even rows, full height) ===== */
  .keypad {
    grid-column: 2 / 3;
    grid-row: 1 / -1;
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    grid-template-rows: repeat(7, minmax(var(--tile-min), 1fr));
    gap: var(--gap);                 /* same gap between every row/col */
    padding: var(--pad);
    box-sizing: border-box;
  }

  /* Flatten the inner wrappers so their children are placed directly on the 7×5 grid */
  .console-grid,
  .fract-grid {
    display: contents !important;
    margin: 0 !important;            /* remove legacy spacing */
    gap: 0 !important;               /* gaps now owned by .keypad */
  }

  /* Neutralize any leftover row sizing from the old split layout */
  .console-grid { grid-template-rows: unset !important; }
  .fract-grid   { grid-template-rows: unset !important; }

  /* Safety: don’t let outer wrappers clamp width */
  body > *,
  body > * > * { max-width: none !important; }
}



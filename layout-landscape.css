/* layout-landscape.css
   Landscape-only layout for Inch Calc
   - Full device size on .card (100dvw/100dvh)
   - Safe-area padding applied to .card (not body), so content never sits under status/notch areas
   - Left column widened (55%) for Bezel + Memory
   - Extra space between columns (25px)
   - Lock keypad internal gap to 8px
*/

@media (orientation: landscape), (min-aspect-ratio: 1/1) {

  /* ===== Global safeguards ===== */

  :root {
    --card-max: 99999px;     /* defeat clamp upper bound from portrait */
    --left-col-fr: 0.55fr;   /* widen left side */
    --right-col-fr: 0.45fr;  /* right side */
  }

  html, body, #app {
    width: 100% !important;
    max-width: none !important;
    box-sizing: border-box;
  }

  /* In landscape, let .card own the safe-area padding.
     This prevents content from hiding under the system bars.
  */
  body {
    display: block !important;   /* override portrait flex */
    margin: 0;
    padding: 0 !important;       /* <— move padding off body */
    min-height: 100dvh;
    overflow: hidden;
    background: #1f4d4d;         /* keep your bg color edge-to-edge */
  }

  /* ===== .card fills the device viewport and applies safe-area padding ===== */
  .card,
  #card {
    position: relative;
    width: 100dvw !important;
    height: 100dvh !important;

    /* Apply safe-area padding directly here */
    padding:
      calc(env(safe-area-inset-top, 0px) + 10px)
      calc(env(safe-area-inset-right, 0px) + 10px)
      calc(env(safe-area-inset-bottom, 0px) + 10px)
      calc(env(safe-area-inset-left, 0px) + 10px);

    /* No external max constraints */
    max-width: none !important;
    max-height: none !important;
    margin: 0 !important;
    box-sizing: border-box;

    /* 2-column layout inside the padded safe area */
    display: grid !important;
    grid-template-columns: var(--left-col-fr) var(--right-col-fr);
    grid-auto-rows: minmax(0, 1fr);
    grid-auto-flow: row;

    /* Wider gap between left/right columns, keep row gaps tight */
    column-gap: 25px;        /* adjust to taste */
    row-gap: var(--gap);     /* your base var (8px) */
  }

  /* ===== Left column: Bezel stacked over Memory ===== */
  .bezel,
  .memory,
  .panel {
    width: 100% !important;
    max-width: none !important;
    justify-self: stretch !important;
    align-self: stretch;
  }

  .bezel {
    grid-column: 1;
    grid-row: 1;
    margin: 0 0 var(--gap) 0;
  }

  .memory {
    grid-column: 1;
    grid-row: 2;
    align-self: end;
    max-height: none;  /* allow full width/height within the grid track */
    overflow: clip;
  }

  .bezel__rim {
    width: 100%;
    box-sizing: border-box;
  }

  .results .pad { gap: 8px; }
  .history { max-height: 100%; overflow: auto; }

  .row.input { font-size: clamp(20px, 2.2vw, 30px); }
  .output    { font-size: clamp(20px, 1.9vw, 30px); }

  /* ===== Right column: Keypad (console + fractions) ===== */
  .keypad {
    grid-column: 2 / 3;
    grid-row: 1 / -1;

    display: grid;
    grid-template-rows: auto 1fr;
    gap: 8px; /* lock console vs. fractions spacing to 8px */

    /* Compute responsive tile height from visible height */
    --available-h: calc(100dvh - env(safe-area-inset-top, 0px) - env(safe-area-inset-bottom, 0px));
    --land-rows: 7;          /* 4 console + 3 fractions */
    --land-gap-count: 8;     /* 4 + 3 + 1 between grids */
    --tile-h: calc((var(--available-h) - var(--land-gap-count) * var(--gap)) / var(--land-rows));
  }

  :root {
    --tile-min: 44px;
    --tile-max: 120px;
  }

  .console-grid,
  .fract-grid {
    width: 100%;
    --tile: clamp(var(--tile-min), var(--tile-h), var(--tile-max));
  }

  .console-grid { grid-template-rows: repeat(4, var(--tile)); }
  .fract-grid   { grid-template-rows: repeat(3, var(--tile)); }

  .keypad.pad { padding: var(--pad); }

  /* Safety: don’t let outer wrappers clamp width */
  body > *,
  body > * > * {
    max-width: none !important;
  }
}
